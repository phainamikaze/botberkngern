# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: BBG # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10

# you can overwrite defaults here
  stage: dev
  region: ap-southeast-1
  iamManagedPolicies:
    - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  environment:
    LIST_TABLE: BBG-LIST

# you can add packaging information here
package:
  include:
    - functions/**
  exclude:
    - node_modules/**

functions:
  createlist:
    handler: functions/createlist/index.handler
    events:
      - http:
          path: createlist
          method: post
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    StaticWebHosting:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
      DeletionPolicy: Retain
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyStaticWebHostingPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref StaticWebHosting
                  - /*
        Bucket: !Ref StaticWebHosting
    StaticWebHostingCloudFront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: True
          Origins:
            - DomainName: !Select
                - 1
                - !Split ["//", !GetAtt StaticWebHosting.WebsiteURL]
              Id: !Select
                - 0
                - !Split
                  - "."
                  - !Select
                    - 1
                    - !Split ["//", !GetAtt StaticWebHosting.WebsiteURL]
              CustomOriginConfig:
                OriginProtocolPolicy: http-only
          DefaultCacheBehavior:
            TargetOriginId: !Select
                - 0
                - !Split
                  - "."
                  - !Select
                    - 1
                    - !Split ["//", !GetAtt StaticWebHosting.WebsiteURL]
            DefaultTTL: 5
            MaxTTL: 30
            ForwardedValues:
              QueryString: false
            ViewerProtocolPolicy: redirect-to-https
  Outputs:
    WebsiteURL:
      Value: !GetAtt 
        - StaticWebHosting
        - WebsiteURL
      Description: URL for website hosted on S3
    CloudFrontURL:
      Value: !GetAtt StaticWebHostingCloudFront.DomainName
    S3BucketSecureURL:
      Value: !Join 
        - ''
        - - 'https://'
          - !GetAtt 
            - StaticWebHosting
            - DomainName
      Description: Name of S3 bucket to hold website content
