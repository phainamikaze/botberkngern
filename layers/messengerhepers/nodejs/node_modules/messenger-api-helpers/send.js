const castArray = require('lodash/castArray');
const messages = require('./messages');
const api = require('./api');

const APP_URL = process.env.APP_URL;

// Turns typing indicator on.
const typingOn = (recipientId) => {
  return {
    recipient: {
      id: recipientId,
    },
    sender_action: 'typing_on', 
  };
};

// Turns typing indicator off.
const typingOff = (recipientId) => {
  return {
    recipient: {
      id: recipientId,
    },
    sender_action: 'typing_off', 
  };
};

// Wraps a message JSON object with recipient information.
const messageToJSON = (recipientId, messagePayload) => {
  return {
    recipient: {
      id: recipientId,
    },
    message: messagePayload,
  };
};

// Send one or more messages using the Send API.
const sendMessage = async (recipientId, messagePayloads) => {
  const messagePayloadArray = castArray(messagePayloads)
    .map((messagePayload) => messageToJSON(recipientId, messagePayload));

  await api.callMessagesAPI([
    typingOn(recipientId),
    ...messagePayloadArray,
    typingOff(recipientId),
  ]);
  return;
};

const sendReadReceipt = async (recipientId) => {
  const messageData = {
    recipient: {
      id: recipientId,
    },
    sender_action: 'mark_seen', 
  };

  await api.callMessagesAPI(messageData);
  return;
};

const sendWelcomeMessage = async (recipientId) => {
  await sendMessage(recipientId, messages.welcomeMessage(APP_URL));
  return;
};

const sendNoListsYet = async (recipientId) => {
  await sendMessage(recipientId, messages.noListsMessage(APP_URL));
  return;
};

const sendLists = async (recipientId, action, lists, offset) => {
  switch (lists.length) {
    case 0:
      await sendNoListsYet(recipientId);
      return;

    case 1:
      const {owner, createtime, title} = lists[0];
      await sendMessage(
        recipientId,
        messages.shareListMessage(APP_URL,owner, createtime, title, 'เปิดดู'),
      );
      return;

    default:
      await sendMessage(
        recipientId,
        messages.paginatedListsMessage(APP_URL, action, lists, offset)
      );
      return;
  }
};

// Send a message notifying the user their list has been created.
const sendListCreated = (recipientId, owner, createtime, title) => {
  sendMessage(
    recipientId,
    [
      messages.listCreatedMessage,
      messages.shareListMessage(APP_URL, owner, createtime, title, 'เปิดดู'),
    ]);
};
const sendListDeleted = (recipientId, title) => {
  sendMessage(
    recipientId,
    [
      messages.listDelMessage(title)
    ]);
};
const sendItemUpdated = (recipientId, owner, createtime, title,details) => {
  sendMessage(
    recipientId,
    [
      messages.ItemUpdatedMessage(title,details),
      messages.shareListMessage(APP_URL, owner, createtime, title, 'เปิดดู'),
    ]);
};
module.exports = {
  sendListCreated,
  sendLists,
  sendMessage,
  sendNoListsYet,
  sendReadReceipt,
  sendWelcomeMessage,
  sendListDeleted,
  sendItemUpdated
};
